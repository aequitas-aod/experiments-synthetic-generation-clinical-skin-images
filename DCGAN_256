{"cells":[{"cell_type":"markdown","metadata":{"id":"1Lrik-XjQgh2"},"source":["# DCGAN"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OAjVYR-k9y-9","outputId":"b192344e-b6ed-4c32-f7b0-3b1c2f49765a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting wandb\n","  Downloading wandb-0.16.3-py3-none-any.whl (2.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m19.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: Click!=8.0.0,>=7.1 in /usr/local/lib/python3.10/dist-packages (from wandb) (8.1.7)\n","Collecting GitPython!=3.1.29,>=1.0.0 (from wandb)\n","  Downloading GitPython-3.1.41-py3-none-any.whl (196 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m196.4/196.4 kB\u001b[0m \u001b[31m15.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from wandb) (2.31.0)\n","Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from wandb) (5.9.5)\n","Collecting sentry-sdk>=1.0.0 (from wandb)\n","  Downloading sentry_sdk-1.40.4-py2.py3-none-any.whl (257 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m257.9/257.9 kB\u001b[0m \u001b[31m29.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting docker-pycreds>=0.4.0 (from wandb)\n","  Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from wandb) (6.0.1)\n","Collecting setproctitle (from wandb)\n","  Downloading setproctitle-1.3.3-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (30 kB)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from wandb) (67.7.2)\n","Requirement already satisfied: appdirs>=1.4.3 in /usr/local/lib/python3.10/dist-packages (from wandb) (1.4.4)\n","Requirement already satisfied: protobuf!=4.21.0,<5,>=3.19.0 in /usr/local/lib/python3.10/dist-packages (from wandb) (3.20.3)\n","Requirement already satisfied: six>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from docker-pycreds>=0.4.0->wandb) (1.16.0)\n","Collecting gitdb<5,>=4.0.1 (from GitPython!=3.1.29,>=1.0.0->wandb)\n","  Downloading gitdb-4.0.11-py3-none-any.whl (62 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/62.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m"]}],"source":["!pip install wandb\n","import os\n","import wandb\n","import torch\n","from torch.utils.data import Dataset, DataLoader\n","from pathlib import Path\n","from typing import Dict, List, Any\n","from PIL import Image\n","from datetime import datetime\n","from torchvision.transforms import ToTensor, Compose, Normalize\n","import torch.nn.functional as F\n","import numpy as np\n","import random\n","from torch.nn import Conv2d, BatchNorm2d, ReLU, MaxPool2d, Sequential, Sigmoid, Upsample, ModuleList, LeakyReLU, Linear\n","import matplotlib.pyplot as plt\n","from typing import Any\n","import torch.nn as nn"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wOSgHb4T8d5R"},"outputs":[],"source":["# Setting seeds\n","\n","def set_seeds(seed: int=42):\n","    \"\"\"Sets random sets for torch operations.\n","\n","    Args:\n","        seed (int, optional): Random seed to set. Defaults to 42.\n","    \"\"\"\n","    # Set the seed for general torch operations\n","    torch.manual_seed(seed)\n","    # Set the seed for CUDA torch operations (ones that happen on the GPU)\n","    torch.cuda.manual_seed(seed)\n","\n","set_seeds(19890)"]},{"cell_type":"markdown","metadata":{"id":"6JskyaA45_mx"},"source":["## Inputs\n","\n","Let’s define some inputs for the run:\n","\n","-  ``workers`` - the number of worker threads for loading the data with\n","   the ``DataLoader``.\n","-  ``batch_size`` - the batch size used in training. The DCGAN paper\n","   uses a batch size of 128.\n","-  ``image_size`` - the spatial size of the images used for training.\n","   This implementation defaults to 64x64. If another size is desired,\n","   the structures of D and G must be changed. See\n","   [here](https://github.com/pytorch/examples/issues/70)_ for more\n","   details.\n","-  ``nc`` - number of color channels in the input images. For color\n","   images this is 3.\n","-  ``nz`` - length of latent vector.\n","-  ``ngf`` - relates to the depth of feature maps carried through the\n","   generator.\n","-  ``ndf`` - sets the depth of feature maps propagated through the\n","   discriminator.\n","-  ``num_epochs`` - number of training epochs to run. Training for\n","   longer will probably lead to better results but will also take much\n","   longer.\n","-  ``lr`` - learning rate for training. As described in the DCGAN paper,\n","   this number should be 0.0002.\n","-  ``beta1`` - beta1 hyperparameter for Adam optimizers. As described in\n","   paper, this number should be 0.5.\n","-  ``ngpu`` - number of GPUs available. If this is 0, code will run in\n","   CPU mode. If this number is greater than 0 it will run on that number\n","   of GPUs.\n","-  ``GDRIVE`` - Set to True if the (already preprocessed) raw image/mask dataset is stored in a Google Drive personal folder (with path specified some cells below). False if the dataset is stored locally.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3T53JlN75_my"},"outputs":[],"source":["# Number of workers for dataloader\n","workers = 2\n","\n","# Batch size used to split the dataset and train the model [128 in Default DCGAN]\n","batch_size = 128\n","\n","# Image size as input to the model (either 64 or 256)\n","image_size = 256\n","\n","# Number of channels in the training images. For color images this is 3\n","nc = 3\n","\n","# Size of z latent vector (i.e. size of generator input) [100 in Default DCGAN]\n","nz = 100\n","\n","# Size of feature maps in generator [64 in Default DCGAN]\n","ngf = 16\n","\n","# Size of feature maps in discriminator [64 in Default DCGAN]\n","ndf = 64\n","\n","# Number of training epochs\n","num_epochs = 10\n","\n","# Learning rate for optimizers [0.0002 in Default DCGAN]\n","lr = 0.0002\n","\n","# Beta1 hyperparameter for Adam optimizers [0.5 in Default DCGAN]\n","beta1 = 0.5\n","\n","# Number of GPUs available. Use 0 for CPU mode.\n","ngpu = 1\n","\n","# Use dataset stored on Google Drive personal folder if True, use local dataset if False\n","GDRIVE = True\n","\n","# Avoid printing images used to train the model if True, shows em if False.\n","CENSOR = False\n","\n","\n","config = {\n","    \"architecture\":\"DCGAN-resizeconv\",\n","    \"nc\": nc,\n","    \"nz\": nz,\n","    \"ngf\": ngf,\n","    \"ndf\": ndf,\n","    \"num_epochs\": num_epochs,\n","    \"lr\": lr,\n","    \"beta1\": beta1,\n","    \"ngpu\": ngpu,\n","    }"]},{"cell_type":"markdown","metadata":{"id":"rXSQF2Qv9y_E"},"source":["## Dataset creation\n","\n","Our dataset is made up of image-color mask pairs, but since we use a non-conditional GAN, we don't make use of the masks."]},{"cell_type":"markdown","metadata":{"id":"wwifbTknATGE"},"source":["- The images are converted from PIL format to tensors in [0,1] and later rescaled in the range [-1,1] to comply with Tanh function range\n","- No channel normalization is done, since it would require to remember the pre-normalization range, which can't be done for generated images.\n","\n","**N.B.:** If channel normalization would be done after rescaling in [-1,1], we would have images that are potentially unbounded (since they lie on a standard normal) and can't be used with a Tanh function."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"azh9m3_A9y_F"},"outputs":[],"source":["class TanhRescaler(object):\n","    def __call__(self, input_data):\n","        # Assuming input_data is a PyTorch tensor\n","        transformed_data = input_data * 2 - 1\n","        return transformed_data\n","\n","class MaskPairDataset(Dataset):\n","    '''\n","    Custom PyTorch dataset class for handling paired image-mask data.\n","\n","    Args:\n","        base_folder (Path): The base folder containing the image and mask pairs.\n","        transforms (callable, optional): Transforms to be applied to the input images. Default is None.\n","        mask_transforms (callable, optional): Transforms to be applied to the masks. Default is None.\n","        suffix (str, optional): The suffix added to image filenames to obtain corresponding mask filenames. Default is \"_mask\".\n","        is_mask_rgb (bool, optional): Flag indicating whether the masks are in RGB format. Default is False.\n","        mask (bool, optional): Flag indicating whether the dataset includes masks. Default is False.\n","\n","    Attributes:\n","        transforms (callable): Transforms to be applied to the input images.\n","        mask_transforms (callable): Transforms to be applied to the masks.\n","        is_mask_rgb (bool): Flag indicating whether the masks are in RGB format.\n","        mask (bool): Flag indicating whether the dataset includes masks.\n","        img_list (list): List of image file paths.\n","        paired_data (list): List of paired image and mask file paths.\n","\n","    Methods:\n","        __len__(self) -> int:\n","            Returns the total number of paired image-mask data in the dataset.\n","\n","        __getitem__(self, index) -> Dict:\n","            Retrieves an item (image and its corresponding mask) by index.\n","    '''\n","\n","    def __init__(self, base_folder : Path,\n","                 transforms = None,\n","                 mask_transforms = None,\n","                 suffix:str = \"_mask\",\n","                 is_mask_rgb:bool = False,\n","                 mask=False):\n","\n","        self.transforms = transforms\n","        self.mask_transforms = mask_transforms\n","        self.is_mask_rgb = is_mask_rgb\n","        self.mask = mask\n","        self.img_list = []\n","\n","        # Get all png images in the folder\n","        self.img_list = base_folder.glob(\"*.png\")\n","        # Remove the masks\n","        self.img_list = [img for img in self.img_list if \"mask\" not in img.name]\n","\n","        # Create the pairs\n","        self.paired_data = []\n","\n","        if self.mask:\n","          for img in self.img_list:\n","              supposed_mask = base_folder / (img.stem + suffix + \".png\")\n","              if supposed_mask.is_file():\n","                  self.paired_data.append((img, supposed_mask))\n","\n","    def __len__(self) -> int:\n","        '''\n","        Returns the total number of paired image-mask data in the dataset.\n","\n","        Returns:\n","            int: Length of paired data.\n","        '''\n","        if self.mask:\n","          return len(self.paired_data)\n","        else:\n","          return len(self.img_list)\n","\n","\n","    def __getitem__(self, index) -> Dict:\n","        '''\n","        Retrieves an item (image and its corresponding mask) by index.\n","\n","        Args:\n","            index (int): Index of the item to retrieve.\n","\n","        Returns:\n","            Dict: A dictionary containing 'img' (image) and 'mask' (corresponding mask).\n","        '''\n","\n","        if self.mask:\n","            img_path, mask_path = self.paired_data[index]\n","            img = Image.open(img_path).convert(\"RGB\")\n","            if self.is_mask_rgb:\n","                mask = Image.open(mask_path).convert(\"RGB\")\n","            else:\n","                mask = Image.open(mask_path).convert(\"L\")\n","        else:\n","            img_path = self.img_list[index]\n","            img = Image.open(img_path).convert(\"RGB\")\n","\n","        # Apply transforms\n","        if self.transforms:\n","            # Make sure that random transforms to both image and mask behave in the same way\n","            seed = np.random.randint(2147483647)\n","\n","            random.seed(seed)\n","            torch.manual_seed(seed)\n","            img = self.transforms(img)\n","\n","            random.seed(seed)\n","            torch.manual_seed(seed)\n","\n","        if self.mask_transforms and self.mask:\n","                mask = self.transforms(mask)\n","\n","        if self.mask:\n","            return {\"img\":img, \"mask\":mask}\n","        else:\n","            return {\"img\":img}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i7om8HVzKRX2"},"outputs":[],"source":["# accessing GDrive preprocessed dataset folder\n","if GDRIVE:\n","    from google.colab import drive\n","    drive.mount('/content/gdrive/', force_remount=True)\n","\n","# accessing dataset folder and printing files contained in it\n","os.chdir('./gdrive/MyDrive/AII Project/experiments-synthetic-generation-clinical-skin-images-main')\n","!ls"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sDPLlX4n9y_F"},"outputs":[],"source":["# Building the dataset and dataloader (just rerun in case of errors for input/output)\n","import torchvision.transforms as transforms\n","\n","base_folder = Path(\"./crops\")\n","\n","if image_size != 256:\n","    transforms = transforms.Compose([transforms.CenterCrop((image_size,image_size)), ToTensor(), TanhRescaler()])\n","\n","\n","else:\n","    transforms = transforms.Compose([ToTensor(), TanhRescaler()])\n","\n","\n","\n","dataset = MaskPairDataset(base_folder, transforms=transforms, suffix=\"_mask2\", is_mask_rgb=True)#, img_norm=Normalize(mean=means, std=stds), mask_norm=Normalize(mean=[0.5], std=[0.5]))\n","\n","print('This dataset contains {} samples, with dimension {}'.format(len(dataset),dataset[0]['img']))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MdmFzBSCsb4U"},"outputs":[],"source":["# visualizing a transformed sample (remember that ToTensor() maps from [0-255] to [-1,1])\n","dataset[0]"]},{"cell_type":"markdown","metadata":{"id":"c_51uHlFjZiT"},"source":["## Data\n","\n","Here we create training batches from the original dataset\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bRPXjh26jZiT"},"outputs":[],"source":["import torchvision.utils as vutils\n","\n","# Decide which device we want to run on\n","device = torch.device(\"cuda:0\" if (torch.cuda.is_available() and ngpu > 0) else \"cpu\")\n","\n","\n","# Create the dataloader\n","dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,\n","                                         pin_memory = torch.cuda.is_available(),\n","                                         shuffle=True, num_workers=workers)"]},{"cell_type":"markdown","metadata":{"id":"D6zs8tlVjZiU"},"source":["## Implementation\n","\n","With our input parameters set and the dataset prepared, we can now get\n","into the implementation. We will start with the weight initialization\n","strategy, then talk about the generator, discriminator, loss functions,\n","and training loop in detail.\n","\n","### Weight Initialization\n","\n","From the DCGAN paper, the authors specify that all model weights shall\n","be randomly initialized from a Normal distribution with ``mean=0``,\n","``stdev=0.02``. The ``weights_init`` function takes an initialized model as\n","input and reinitializes all convolutional, convolutional-transpose, and\n","batch normalization layers to meet this criteria. This function is\n","applied to the models immediately after initialization.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZaMmUx3LjZiU"},"outputs":[],"source":["# custom weights initialization called on ``netG`` and ``netD``\n","def weights_init(m):\n","    classname = m.__class__.__name__\n","    if classname.find('ConvBlock') != -1:\n","        pass\n","    elif classname.find('Conv') != -1:\n","        nn.init.normal_(m.weight.data, 0.0, 0.02)\n","    elif classname.find('BatchNorm') != -1:\n","        nn.init.normal_(m.weight.data, 1.0, 0.02)\n","        nn.init.constant_(m.bias.data, 0)"]},{"cell_type":"markdown","metadata":{"id":"C7Ov6AWCjZiV"},"source":["### Generator\n","\n","The generator, $G$, is designed to map the latent space vector\n","($z$) to data-space. Since our data are images, converting\n","$z$ to data-space means ultimately creating a RGB image with the\n","same size as the training images (i.e. 3x64x64). In practice, this is\n","accomplished through a series of strided two dimensional *resize-convolution* layers (instead of convolutional\n","transpose layers, to [avoid checkerboard-like artifacts](https://distill.pub/2016/deconv-checkerboard/)) each paired with a 2d batch norm layer and a relu\n","activation. The output of the generator is fed through a tanh function\n","to return it to the input data range of $[-1,1]$. It is worth\n","noting the existence of the batch norm functions after the\n","resize-convolution layers, as this is a critical contribution of the DCGAN\n","paper. These layers help with the flow of gradients during training.\n","\n","Notice, how the inputs we set in the input section (``nz``, ``ngf``, and\n","``nc``) influence the generator architecture in code. ``nz`` is the length\n","of the z input vector, ``ngf`` relates to the size of the feature maps\n","that are propagated through the generator, and ``nc`` is the number of\n","channels in the output image (set to 3 for RGB images). Below is the\n","code for the generator.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"21Quvxn4jZiV"},"outputs":[],"source":["# Generator Code\n","\n","class ResizeConvBlock(nn.Module):\n","\n","    def __init__(self, in_channels, out_channels, scale_factor=2):\n","          super(ResizeConvBlock, self).__init__()\n","          self.main = nn.Sequential(\n","                  nn.Upsample(scale_factor = scale_factor, mode='bilinear'),\n","                  nn.ReflectionPad2d(1),\n","                  nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=0),\n","                  nn.Conv2d(out_channels, out_channels, kernel_size=4, stride=1, bias=False, padding='same'),\n","                  nn.BatchNorm2d(out_channels),\n","                  nn.ReLU(inplace=True),\n","                  nn.Dropout2d(0.2),\n","              )\n","\n","    def forward(self,x):\n","          return self.main(x)\n","\n","\n","class Generator(nn.Module):\n","\n","    def __init__(self, ngpu):\n","        super(Generator, self).__init__()\n","        self.ngpu = ngpu\n","        self.main = nn.ModuleList([\n","            # input is Z, going into a convolution\n","            ResizeConvBlock(in_channels=nz, out_channels=ngf*32),\n","            # state size. ``(ngf*32) x 2 x 2``\n","            ResizeConvBlock(in_channels=ngf*32, out_channels=ngf*32),\n","            # state size. ``(ngf*32) x 4 x 4``\n","            ResizeConvBlock(in_channels=ngf*32, out_channels=ngf*16),\n","            # state size. ``(ngf*16) x 8 x 8``\n","            ResizeConvBlock(in_channels=ngf*16, out_channels=ngf*8),\n","            # state size. ``(ngf*8) x 16 x 16``\n","            ResizeConvBlock(in_channels=ngf*8, out_channels=ngf*4),\n","            # state size. ``(ngf*4) x 32 x 32``\n","            ResizeConvBlock(in_channels=ngf*4, out_channels=ngf*2),\n","            # state size. ``(ngf*2) x 64 x 64``\n","            ResizeConvBlock(in_channels=ngf*2, out_channels=ngf),\n","            # state size. ``(ngf) x 128 x 128``\n","\n","            nn.Upsample(scale_factor = 2, mode='bilinear'),\n","            nn.ReflectionPad2d(1),\n","            nn.Conv2d(in_channels=ngf, out_channels=nc, kernel_size=3, stride=1, padding=0),\n","            nn.Tanh(),\n","\n","            # state size. ``(nc) x 256 x 256``\n","            ])\n","\n","    def forward(self, x):\n","        for i, l in enumerate(self.main):\n","            x = self.main[i](x)\n","        return x\n","\n","\n","\n","\n","def test_gen_sizes(generator):\n","    '''\n","    Test Generator Output Sizes\n","\n","    This function tests the output size of a generator by generating images\n","    from a sample noise vector and checking if the generated images match\n","    the expected shape.\n","\n","    Args:\n","    - generator: The generator model to test.\n","\n","    Returns:\n","    - None\n","    '''\n","\n","    # size 1 batch of input noise\n","    sample_noise = torch.randn(batch_size, nz, 1, 1).to(device)\n","\n","    # Generate images from the noise vector using the generator\n","    with torch.no_grad():\n","        generated_images = generator(sample_noise)\n","\n","    # Check the size of the generated images\n","    expected_shape_out = list(generated_images.shape)\n","    actual_shape_out = [batch_size, nc, image_size, image_size]\n","\n","    assert expected_shape_out == actual_shape_out\n","    print(\"Generated images shape:\", expected_shape_out, 'corresponding to [batch_size, nc, image_dim, image_dim]')\n"]},{"cell_type":"markdown","metadata":{"id":"H42QTpPvjZiV"},"source":["Now, we can instantiate the generator and apply the ``weights_init``\n","function. Check out the printed model to see how the generator object is\n","structured.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LQHMzrfPjZiV"},"outputs":[],"source":["# Create the generator\n","netG = Generator(ngpu).to(device)\n","\n","# Handle multi-GPU if desired\n","if (device.type == 'cuda') and (ngpu > 1):\n","    netG = nn.DataParallel(netG, list(range(ngpu)))\n","\n","# Apply the ``weights_init`` function to randomly initialize all weights\n","#  to ``mean=0``, ``stdev=0.02``.\n","netG.apply(weights_init)\n","\n","# Print the model\n","print(netG)\n","\n","# testing generator architecture\n","test_gen_sizes(netG)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CT9Swz7kiGSR"},"outputs":[],"source":["# print model summary\n","from torchvision import models\n","from torchsummary import summary\n","\n","summary(netG, (nz,1,1), batch_size=batch_size)"]},{"cell_type":"markdown","metadata":{"id":"IxH3bQ6ZjZiW"},"source":["### Discriminator\n","\n","As mentioned, the discriminator, $D$, is a binary classification\n","network that takes an image as input and outputs a scalar probability\n","that the input image is real (as opposed to fake). Here, $D$ takes\n","a 3x64x64 input image, processes it through a series of Conv2d,\n","BatchNorm2d, and LeakyReLU layers, and outputs the final probability\n","through a Sigmoid activation function. This architecture can be extended\n","with more layers if necessary for the problem, but there is significance\n","to the use of the strided convolution, BatchNorm, and LeakyReLUs. The\n","DCGAN paper mentions it is a good practice to use strided convolution\n","rather than pooling to downsample because it lets the network learn its\n","own pooling function. Also batch norm and leaky relu functions promote\n","healthy gradient flow which is critical for the learning process of both\n","$G$ and $D$.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vF_3dQMsjZiW"},"outputs":[],"source":["class ConvBlock(nn.Module):\n","    def __init__(self, in_channels, out_channels, kernel_size=4, stride=2, padding=1):\n","        super().__init__()\n","        self.conv = nn.Conv2d(in_channels = in_channels,\n","                              out_channels=out_channels,\n","                              kernel_size=kernel_size,\n","                              stride=stride,\n","                              padding=padding,\n","                              bias=False)\n","        self.bn = nn.BatchNorm2d(out_channels)\n","        self.lrelu = nn.LeakyReLU(0.2, inplace=True)\n","\n","    def forward(self, x):\n","\n","        out = self.conv(x)\n","        out = self.bn(out)\n","        out = self.lrelu(out)\n","\n","        return out\n","\n","\n","class Discriminator(nn.Module):\n","    def __init__(self, ngpu):\n","        super(Discriminator, self).__init__()\n","        self.ngpu = ngpu\n","        self.main = nn.ModuleList([\n","            # input is ``(nc) x 256 x 256``\n","            nn.Conv2d(nc, ndf, 4, 2, 1, bias=False),\n","            nn.LeakyReLU(0.2, inplace=True),\n","\n","            # state size. ``(ndf) x 128 x 128``\n","            ConvBlock(in_channels=ndf, out_channels=ndf*2),\n","\n","            # state size. ``(ndf*2) x 64 x 64``\n","            ConvBlock(in_channels=ndf*2, out_channels=ndf*4),\n","\n","            # state size. ``(ndf*4) x 32 x 32``\n","            ConvBlock(in_channels=ndf*4, out_channels=ndf*8),\n","\n","            # state size. ``(ndf*8) x 16 x 16``\n","            ConvBlock(in_channels=ndf*8, out_channels=ndf*16),\n","\n","            # state size. ``(ndf*16) x 8 x 8``\n","            ConvBlock(in_channels=ndf*16, out_channels=ndf*16),\n","\n","            # state size. ``(ndf*16) x 4 x 4``\n","            nn.Conv2d(in_channels = ndf * 16, out_channels=1, kernel_size=4,\n","                      stride=1, padding=0, bias=False),\n","            nn.Sigmoid()\n","\n","            # state size. ``1 x 1 x 1``\n","            ])\n","\n","    def forward(self, x):\n","        for i, l in enumerate(self.main):\n","            x = self.main[i](x)\n","        return x\n","\n","\n","def test_desc_sizes(descriminator):\n","    \"\"\"\n","    Checks the size of generated images from a discriminator.\n","\n","    Args:\n","    - descriminator: The discriminator model used to generate images.\n","\n","    This function generates fake images from random noise and passes them through\n","    the discriminator to verify the shape of the output. It ensures that the\n","    generated images have the expected shape [batch_size, 1, 1, 1].\n","    \"\"\"\n","\n","    # size 1 batch of input noise\n","    fake_img = torch.randn(batch_size, nc, image_size, image_size).to(device)\n","\n","    # Generate images from the noise vector using the generator\n","    with torch.no_grad():\n","        binary_out = descriminator(fake_img).to(device)\n","\n","    # Check the size of the generated images\n","    expected_shape_out = [batch_size, 1, 1, 1]\n","    actual_shape_out = list(binary_out.shape)\n","\n","    assert expected_shape_out == actual_shape_out\n","    print(\"Generated images shape:\", expected_shape_out, 'corresponding to [batch_size, 1, 1, 1]')"]},{"cell_type":"markdown","metadata":{"id":"XtOenmzbjZiW"},"source":["Now, as with the generator, we can create the discriminator, apply the\n","``weights_init`` function, and print the model’s structure.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w7Ud0VrdjZiX"},"outputs":[],"source":["# Create the Discriminator\n","netD = Discriminator(ngpu).to(device)\n","\n","# Handle multi-GPU if desired\n","if (device.type == 'cuda') and (ngpu > 1):\n","    netD = nn.DataParallel(netD, list(range(ngpu)))\n","\n","# Apply the ``weights_init`` function to randomly initialize all weights\n","# like this: ``to mean=0, stdev=0.2``.\n","netD.apply(weights_init)\n","\n","# Print the model\n","print(netD)\n","\n","test_desc_sizes(netD)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"k7_ZzI8uiQqE"},"outputs":[],"source":["# print model summary\n","from torchvision import models\n","from torchsummary import summary\n","\n","summary(netD, (nc, image_size, image_size), batch_size=batch_size)"]},{"cell_type":"markdown","metadata":{"id":"hU_AbObgjZiX"},"source":["### Loss Functions and Optimizers\n","\n","With $D$ and $G$ setup, we can specify how they learn\n","through the loss functions and optimizers. We will use the Binary Cross\n","Entropy loss\n","([BCELoss](https://pytorch.org/docs/stable/generated/torch.nn.BCELoss.html#torch.nn.BCELoss)_)\n","function which is defined in PyTorch as:\n","\n","\\begin{align}\\ell(x, y) = L = \\{l_1,\\dots,l_N\\}^\\top, \\quad l_n = - \\left[ y_n \\cdot \\log x_n + (1 - y_n) \\cdot \\log (1 - x_n) \\right]\\end{align}\n","\n","Notice how this function provides the calculation of both log components\n","in the objective function (i.e. $log(D(x))$ and\n","$log(1-D(G(z)))$). We can specify what part of the BCE equation to\n","use with the $y$ input. This is accomplished in the training loop\n","which is coming up soon, but it is important to understand how we can\n","choose which component we wish to calculate just by changing $y$\n","(i.e. GT labels).\n","\n","Next, we define our real label as 1 and the fake label as 0. These\n","labels will be used when calculating the losses of $D$ and\n","$G$, and this is also the convention used in the original GAN\n","paper. Finally, we set up two separate optimizers, one for $D$ and\n","one for $G$. As specified in the DCGAN paper, both are Adam\n","optimizers with learning rate 0.0002 and Beta1 = 0.5. For keeping track\n","of the generator’s learning progression, we will generate a fixed batch\n","of latent vectors that are drawn from a Gaussian distribution\n","(i.e. fixed_noise) . In the training loop, we will periodically input\n","this fixed_noise into $G$, and over the iterations we will see\n","images form out of the noise.\n","\n","Label smoothing is applied just on the real images labels, using 0.9 instead of 1. This is a common technique applied to avoid [*descriminator overconfidence*](https://towardsdatascience.com/gan-ways-to-improve-gan-performance-acf37f9f59b). Some other smoothing techniques can also be applied which use to [add random noise](https://www.inference.vc/instance-noise-a-trick-for-stabilising-gan-training/).\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rc5tM_YBjZiX"},"outputs":[],"source":["import torch.optim as optim\n","# Initialize the ``BCELoss`` function\n","criterion = nn.BCELoss()\n","\n","# Create batch of latent vectors that we will use to visualize\n","#  the progression of the generator\n","fixed_noise = torch.randn(64, nz, 1, 1, device=device)\n","\n","# Establish convention for real and fake labels during training\n","real_label = 0.9 #1.\n","fake_label = 0.\n","\n","# Setup Adam optimizers for both G and D\n","optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1, 0.999))\n","optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1, 0.999))\n","\n","# setting an exponential Learning Rate Decay Schedule, that is triggered every 10 epochs\n","decayRate = 0.96\n","D_lr_scheduler = torch.optim.lr_scheduler.ExponentialLR(optimizer=optimizerD, gamma=decayRate)\n","G_lr_scheduler = torch.optim.lr_scheduler.ExponentialLR(optimizer=optimizerG, gamma=decayRate)"]},{"cell_type":"markdown","source":["## WandB connection (online training visualization)"],"metadata":{"id":"LC4pSNxuZKNf"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"MiYoCzG43Lio"},"outputs":[],"source":["# Log in to your W&B account\n","wandb.login()\n","\n","wandb.init(\n","    # Set the project where this run will be logged\n","    project=\"skin-disease-image-generation\",\n","    # We pass a run name (otherwise it’ll be randomly assigned, like sunshine-lollypop-10)\n","    # name=f\"experiment_{run}\",\n","    # Track hyperparameters and run metadata\n","    config=config)"]},{"cell_type":"markdown","metadata":{"id":"c6v9JTIGjZiX"},"source":["### Training\n","\n","Finally, now that we have all of the parts of the GAN framework defined,\n","we can train it. Be mindful that training GANs is somewhat of an art\n","form, as incorrect hyperparameter settings lead to mode collapse with\n","little explanation of what went wrong. Here, we will closely follow\n","Algorithm 1 from the [Goodfellow’s paper](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf)_,\n","while abiding by some of the best\n","practices shown in [ganhacks](https://github.com/soumith/ganhacks)_.\n","Namely, we will “construct different mini-batches for real and fake”\n","images, and also adjust G’s objective function to maximize\n","$log(D(G(z)))$. Training is split up into two main parts. Part 1\n","updates the Discriminator and Part 2 updates the Generator.\n","\n","**Part 1 - Train the Discriminator**\n","\n","Recall, the goal of training the discriminator is to maximize the\n","probability of correctly classifying a given input as real or fake. In\n","terms of Goodfellow, we wish to “update the discriminator by ascending\n","its stochastic gradient”. Practically, we want to maximize\n","$log(D(x)) + log(1-D(G(z)))$. Due to the separate mini-batch\n","suggestion from [ganhacks](https://github.com/soumith/ganhacks)_,\n","we will calculate this in two steps. First, we\n","will construct a batch of real samples from the training set, forward\n","pass through $D$, calculate the loss ($log(D(x))$), then\n","calculate the gradients in a backward pass. Secondly, we will construct\n","a batch of fake samples with the current generator, forward pass this\n","batch through $D$, calculate the loss ($log(1-D(G(z)))$),\n","and *accumulate* the gradients with a backward pass. Now, with the\n","gradients accumulated from both the all-real and all-fake batches, we\n","call a step of the Discriminator’s optimizer.\n","\n","**Part 2 - Train the Generator**\n","\n","As stated in the original paper, we want to train the Generator by\n","minimizing $log(1-D(G(z)))$ in an effort to generate better fakes.\n","As mentioned, this was shown by Goodfellow to not provide sufficient\n","gradients, especially early in the learning process. As a fix, we\n","instead wish to maximize $log(D(G(z)))$. In the code we accomplish\n","this by: classifying the Generator output from Part 1 with the\n","Discriminator, computing G’s loss *using real labels as GT*, computing\n","G’s gradients in a backward pass, and finally updating G’s parameters\n","with an optimizer step. It may seem counter-intuitive to use the real\n","labels as GT labels for the loss function, but this allows us to use the\n","$log(x)$ part of the ``BCELoss`` (rather than the $log(1-x)$\n","part) which is exactly what we want.\n","\n","Finally, we will do some statistic reporting and at the end of each\n","epoch we will push our fixed_noise batch through the generator to\n","visually track the progress of G’s training. The training statistics\n","reported are:\n","\n","-  **Loss_D** - discriminator loss calculated as the sum of losses for\n","   the all real and all fake batches ($log(D(x)) + log(1 - D(G(z)))$).\n","-  **Loss_G** - generator loss calculated as $log(D(G(z)))$\n","-  **D(x)** - the average output (across the batch) of the discriminator\n","   for the all real batch. This should start close to 1 then\n","   theoretically converge to 0.5 when G gets better. Think about why\n","   this is.\n","-  **D(G(z))** - average discriminator outputs for the all fake batch.\n","   The first number is before D is updated and the second number is\n","   after D is updated. These numbers should start near 0 and converge to\n","   0.5 as G gets better. Think about why this is.\n","\n","**Note:** This step might take a while, depending on how many epochs you\n","run and if you removed some data from the dataset.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YLlpnLrljZiY"},"outputs":[],"source":["SAVE_MODEL = True\n","LOAD_MODEL = False\n","\n","if LOAD_MODEL:\n","    netD = torch.load('./saved_models/'+'netD_256_2024-02-01 23:09:13.084546_.pt', map_location=torch.device(device))\n","    netG = torch.load('./saved_models/'+'netG_256_2024-02-01 23:09:13.625496_.pt', map_location=torch.device(device))\n","\n","\n","# Training Loop\n","\n","# Lists to keep track of progress\n","img_list = []\n","G_losses = []\n","D_losses = []\n","iters = 0\n","\n","print(\"Starting Training Loop...\")\n","\n","netD.train()\n","netG.train()\n","# For each epoch\n","for epoch in range(num_epochs):\n","    # For each batch in the dataloader\n","    for i, data in enumerate(dataloader, 0):\n","\n","        ############################\n","        # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))\n","        ###########################\n","        ## Train with all-real batch\n","        netD.zero_grad()\n","        # Format batch\n","        real_cpu = data['img'].to(device)\n","        b_size = real_cpu.size(0)\n","        label = torch.FloatTensor(b_size).uniform_(0.7, 1.0).to(device)\n","        #label = torch.full((b_size,), real_label, dtype=torch.float, device=device)\n","\n","        # Forward pass real batch through D\n","        output = netD(real_cpu).view(-1)\n","        # Calculate loss on all-real batch\n","        errD_real = criterion(output, label)\n","        # Calculate gradients for D in backward pass\n","        errD_real.backward()\n","        D_x = output.mean().item()\n","\n","        ## Train with all-fake batch\n","        # Generate batch of latent vectors\n","        noise = torch.randn(b_size, nz, 1, 1, device=device)\n","        # Generate fake image batch with G\n","        fake = netG(noise)\n","        #label.fill_(fake_label)\n","        label = torch.FloatTensor(b_size).uniform_(0.0, 0.3).to(device)\n","        # Classify all fake batch with D\n","        output = netD(fake.detach()).view(-1)\n","        # Calculate D's loss on the all-fake batch\n","        errD_fake = criterion(output, label)\n","        # Calculate the gradients for this batch, accumulated (summed) with previous gradients\n","        errD_fake.backward()\n","        D_G_z1 = output.mean().item()\n","        # Compute error of D as sum over the fake and the real batches\n","        errD = errD_real + errD_fake\n","        # Update D\n","        optimizerD.step()\n","\n","        ############################\n","        # (2) Update G network: maximize log(D(G(z)))\n","        ###########################\n","        netG.zero_grad()\n","        label.fill_(real_label)  # fake labels are real for generator cost\n","        # Since we just updated D, perform another forward pass of all-fake batch through D\n","        output = netD(fake).view(-1)\n","        # Calculate G's loss based on this output\n","        errG = criterion(output, label)\n","        # Calculate gradients for G\n","        errG.backward()\n","        D_G_z2 = output.mean().item()\n","        # Update G\n","        optimizerG.step()\n","\n","        # Output training stats\n","\n","        print('[%d/%d][%d/%d]\\tLoss_D: %.4f\\tLoss_G: %.4f\\tD(x): %.4f\\tD(G(z)): %.4f / %.4f'\n","              % (epoch, num_epochs, i, len(dataloader),\n","                  errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))\n","\n","        # Save Losses for plotting later\n","        G_losses.append(errG.item())\n","        D_losses.append(errD.item())\n","\n","\n","        with torch.no_grad():\n","                fake_img = netG(fixed_noise)\n","                real_img = real_cpu\n","\n","                image = vutils.make_grid(fake_img, padding=2, normalize=True)\n","                wandb.log({'Generator': errG.item(), 'Descriminator': errD.item(), \"generator_out\": [wandb.Image(image, caption=\"Fake images\")]})\n","\n","                iters +=1\n","\n","\n","    if epoch % 10 == 0:\n","        D_lr_scheduler.step()\n","        G_lr_scheduler.step()\n","\n","    with torch.no_grad():\n","        if SAVE_MODEL:\n","            # saving model weights\n","            torch.save(netD, f'./saved_models/netD_{image_size}_' + str(datetime.now()) + '_.pt')\n","            torch.save(netG, f'./saved_models/netG_{image_size}_' + str(datetime.now()) + '_.pt')\n","            # saving model state\n","            torch.save(netD.state_dict(), './saved_models/netD_state_dict.pth')\n","            torch.save(netG.state_dict(), './saved_models/netG_state_dict.pth')\n","            #saving optimizer state\n","            torch.save(optimizerD.state_dict(), './saved_models/netD_optimizer_state_dict.pth')\n","            torch.save(optimizerG.state_dict(), './saved_models/netG_optimizer_state_dict.pth')\n","\n","        fake = netG(fixed_noise).detach().cpu()\n","        img_list.append(vutils.make_grid(fake, padding=2, normalize=True))\n","\n","\n","# closing WandB connection\n","wandb.finish()\n","# saving models and weights"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Iw-QRw1qvyJB"},"outputs":[],"source":["torch.save(netD, f'./saved_models/netD_{image_size}_' + str(datetime.now()) + '_.pt')\n","torch.save(netG, f'./saved_models/netG_{image_size}_' + str(datetime.now()) + '_.pt')"]},{"cell_type":"markdown","metadata":{"id":"0wrQxnx5jZiY"},"source":["## Results\n","\n","Finally, lets check out how we did. Here, we will look at three\n","different results. First, we will see how D and G’s losses changed\n","during training. Second, we will visualize G’s output on the fixed_noise\n","batch for every epoch. And third, we will look at a batch of real data\n","next to a batch of fake data from G.\n","\n","**Loss versus training iteration**\n","\n","Below is a plot of D & G’s losses versus training iterations.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l_fcmejyjZiZ"},"outputs":[],"source":["plt.figure(figsize=(10,5))\n","plt.title(\"Generator and Discriminator Loss During Training\")\n","plt.plot(G_losses,label=\"G\")\n","plt.plot(D_losses,label=\"D\")\n","plt.xlabel(\"iterations\")\n","plt.ylabel(\"Loss\")\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"8UJ27VXcjZiZ"},"source":["**Visualization of G’s progression**\n","\n","Remember how we saved the generator’s output on the fixed_noise batch\n","after every epoch of training. Now, we can visualize the training\n","progression of G with an animation. Press the play button to start the\n","animation.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Kcx6gXR7jZiZ"},"outputs":[],"source":["import matplotlib.animation as animation\n","from IPython.display import HTML\n","\n","fig = plt.figure(figsize=(8,8))\n","plt.axis(\"off\")\n","ims = [[plt.imshow(np.transpose(i,(1,2,0)), animated=True)] for i in img_list]\n","ani = animation.ArtistAnimation(fig, ims, interval=1000, repeat_delay=1000, blit=True)\n","\n","HTML(ani.to_jshtml())"]},{"cell_type":"markdown","metadata":{"id":"lTaz3O6XjZiZ"},"source":["**Real Images vs. Fake Images**\n","\n","Finally, lets take a look at some real images and fake images side by\n","side.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F6fZ1p5ljZiZ"},"outputs":[],"source":["# Grab a batch of real images from the dataloader\n","real_batch = next(iter(dataloader))\n","\n","# Plot the real images\n","plt.figure(figsize=(15,15))\n","plt.subplot(1,2,1)\n","plt.axis(\"off\")\n","plt.title(\"Real Images\")\n","plt.imshow(np.transpose(vutils.make_grid(real_batch['img'].to(device)[:64], padding=5, normalize=True).cpu(),(1,2,0)))\n","\n","# Plot the fake images from the last epoch\n","plt.subplot(1,2,2)\n","plt.axis(\"off\")\n","plt.title(\"Fake Images\")\n","plt.imshow(np.transpose(img_list[-1],(1,2,0)))\n","plt.show()"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}